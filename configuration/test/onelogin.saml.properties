#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  false

# Enable debug mode (to print errors)
onelogin.saml2.debug =  false


#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = https://convy.unyco.net/convy

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
#onelogin.saml2.sp.assertion_consumer_service.url = https://demo.unyco.net/convy/FW_19/FW19SSO/acs.jsp
onelogin.saml2.sp.assertion_consumer_service.url = https://demo.unyco.net/convy/FW_19/FW19SSO/acs.jsp

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = https://demo.unyco.net/convy/FW_19/FW19SSO/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:2.0:nameid-format:persistent

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert = -----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----

# Requires Format PKCS#8   BEGIN PRIVATE KEY	     
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey = -----BEGIN PRIVATE KEY-----MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7fML3CTpdD2w5qdICjoKPS5WR/BZw8gZXghW2c/GVgI4QNAxzD319+kUnkGuAm9dDP+pz4zw/MQTTmgcLk3YlS2TyADvxgmVEs9IOxCw299fveJ1Ys3GCXbynnTl/Na9Ifa5snfZdlzTLSZH1b2HN8tlQ93WL84msNe6aGQfzwIfXlQZEwCvSP6v6eO/2/Y6Yr7eIlTkVScJWl6UldrCNc6lnyFXo8U8sIriEMoeeyHiPmB00zC2667eAL+u/kk17GadLA9EI8fVJZI48AckAJO79nzQiMaDStlqw55mujp5qh4jLw8rh3WvJ4j2ZVP/tB2Anby42HIFSNSyvIE5lAgMBAAECggEAFezRH/KEUL2s+lFRrdrcicVdCGVienLTKwibYWrNpZ4S/vIXQp1dH45U5/uLls6ircqbsFGyifFBjz1D9aaY+mOGuoYsfGGzVgVxWyi1wvfY2LhSLj1N2OD9XtyUDLxKcz+/VhRi6y7zjZJc70bHOT5dC4rkxCkGwIzOCldDBs4ZuJnrL275adArv3yp6m5GTvecCzEehy8ygeEVS9ojYqqYQ5nom7b7DThqZIzM4XKB/RIfBIdHDK694SasBukxWqBA1sWhXRL60AWoMKL5XJ1mavORFBvJ7dt2L/ifzh3q+Gox8tjhBvHmDyPuHguiAubL08uSr/1PZvgwBXsBQQKBgQDqjhHx3HEXjI93usoSARhWjbfVF7d5TemO9rJ4yheB/5u21j2bTie//J4QqX8ed+5j4WydnWR8i9CM9KGRws7IMypyICEjQHhHQ3kJzSaSZ5GcZC4GyeWnSNGu1WEmlLGDSiRB/3YO6gP9BwyOAT8ctI+JRjr22EwtL9eM5pKaIwKBgQDMoQorE4bmjPvo5zfn4MdD5I7D4kOA+J7xETYrY/EcfVfZgoE8SZCuk+DcVNlPBbySShdR8PtY3jYR9tPsgaqo9hxAsNDFNVt8wPXuk+UIpbX13HLpv4y1V3mlmMJQq9f+DgtH9ztvA4Jq/DimcUeW1/k3y5QzPTZtpQ05P13p1wKBgQCWxIeIXdhb+L/niCuHcyi/ygyWbs5CrPAqMyz5M3300+a1mfSztYMbhzfbIfhSD2kuzqHQlnEXFZASatTIKt5cFXd9MGXckP4/YIGW6UWX6fbQ/hwPxQtXghk2NnZiJEYOTEQOIDU01PuHU1agmPCGdRGmfXw9Wz9r9EqriTJG3QKBgDRONbstEp58CyhNcgzjeAvysEuB2p9s7bPRIneU5FzT7VC7+yzd4Q2+3wty5Nk+LiV2qt9XKehdZJTS8vjRbD4kKrSefb7rFKee6z5Ar5q2QPzHjNgTDnSMF5wsn/7e7icSj++lUpvd2chfEFv7OMFmE14fu5IdY3xDZE3t1KOhAoGAf0cgUhuk6V51VTczMAvdpW6dgvQ1mQCPQzZTYtjLq0g54fS89Wzit9VANGvBVl6buYb3+JL+SBy8L16sQMtG05t4INPRodwGYaMzQqXNeDBKkoVBKaWlvEyqyhuaC2QeB14UivIMOA9aXZ8s4YBtCyeiiM+bIfnenBdhIcqBni4=-----END PRIVATE KEY-----

# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI)
onelogin.saml2.idp.entityid = https://logon-int.fastweb.it:443/oam/fed

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
onelogin.saml2.idp.single_sign_on_service.url = https://logon-int.fastweb.it/oamfed/idp/samlv20

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url = https://logon-int.fastweb.it/oamfed/idp/samlv20

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url = https://logon-int.fastweb.it/oamfed/idp/samlv20

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = -----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint = 
# onelogin.saml2.idp.certfingerprint_algorithm = sha1


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = true

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = true

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = true

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = true

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = true

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
onelogin.saml2.security.requested_authncontext = 

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact


# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

# Organization
onelogin.saml2.organization.name = SP Convy Demo
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = 

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@@example.com

#Redirect SSO
sso.redirect.url = https://demo.unyco.net/convy/static/include/interfaces/CustomerGuiAdvanced/dist/html/chatbutton.html?mode=popover&channel=video&page=/FastwebChatbot/&domain=demo.unyco.net&address=null&
#sso.redirect.url = https://www.repubblica.it
